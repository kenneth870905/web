! function (t, n) {
  "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define &&
    define.amd ? define(n) : t.SnailRace = n()
}(this, function () {
  "use strict";

  function t (t, n, e) {
    n = n || "tm", t && t[n] && (e && t[n].totalProgress(e), t[n].stop(), t[n].remove(), t[n] = null)
  }

  function n (t, n) {
    return isNaN(n) && (n = 0), Math.floor(Math.random() * t) + n
  }

  function e (t, n, e, s, i) {
    var a = n.map(function (n) {
      return function (t, n, e, s, i, a, o) {
        var _ = [],
          r = t + n;
        s && (s = {
          called: !1,
          data: null
        });

        function h (t) {
          return s && s.called && t(s.data), _.push(t),
            function () {
              var n = _.indexOf(t);
              n >= 0 && _.splice(n, 1)
            }
        }

        function d (t) {
          s && (s.called = !0, s.data = t.detail), _.forEach(function (n) {
            n(t.detail)
          }), e && (_ = [])
        }
        i && (i[r] && console.warn("aleady regist:" + r), i[r] = h);
        a && o && a.addEventListener(o, d);
        return {
          register: h,
          on: d,
          destroy: function () {
            _ = null, i && delete i[r];
            a && o && a.removeEventListener(o, d)
          }
        }
      }(n.hasOwnProperty("prefix") ? n.prefix : t, n.evtName, n.once, n.cache, s, e, n.bindName)
    });
    if (s && i) {
      var o = s[i];
      s[i] = function () {
        _(), o.call(s)
      }
    }

    function _ () {
      a.forEach(function (t) {
        t.destroy()
      })
    }
    return i ? s : _
  }

  function s (t) {
    return t / 180 * Math.PI
  }

  function i (t, n, e) {
    return [(e = e || function (t, n) {
      return t + n
    })(t[0], n[0]), e(t[1], n[1])]
  }
  var a = !1;

  function o (t) {
    try {
      return PIXI.Texture.fromFrame(t)
    } catch (n) {
      return a && console.warn("vod_get_textrue_from_sht", t), !1
    }
  }

  function _ (t, n, e) {
    var s = function (t) {
      if (PIXI.TextureCache[t]) return new PIXI.Sprite(PIXI.TextureCache[t])
    }(n);
    return t.addChild(s), e && (s.x = e[0], s.y = e[1]), s
  }

  function r (t, n, e) {
    var s = function (t) {
      var n = PIXI.Texture.fromFrame(t);
      return new PIXI.Sprite(n)
    }(n);
    return t.addChild(s), e && (s.x = e[0], s.y = e[1]), s
  }
  var h = {
    sec: {
      enter: 1,
      exit: 1,
      run_each: .145,
      end: .1
    },
    aniSpeed: {
      prepare: .25,
      stay: .12,
      run_offset: -.5,
      exit: 1.2,
      enter: 1.2
    },
    ary_gn_name: ["r", "g", "b"],
    num_gn_xy_tol: 821.302753041037,
    ary_gn_wh: [[135, 125], [146, 135], [153, 141]],
    ary_gn_xy: [[[57, 52], [747, 52], [800, 33], [875, 33]], [[26, 133], [716, 133], [769, 114], [844, 114]],
    [[8, 237], [698, 237], [751, 218], [826, 218]]],
    ary_gn_rot: [[0, 0, -.3, 0], [0, 0, -.3, 0], [0, 0, -.3, 0]],
    ary_gn_xy_last_idx: 3,
    ary_flag_xy: [[930, 110], [910, 210], [890, 310]],
    int_countdown_x: 500
  },
    d = 0,
    u = 1,
    c = {
      w: 1023,
      h: 439,
      scale: 1
    },
    l = {
      evt_eng_progress: "event.engine.progress",
      evt_eng_rdy: "event.engine.ready",
      evt_load_comp: "event.engine.load.comp",
      evt_upd_bf: "event.onupdate.before",
      evt_upd_af: "event.onupdate.after"
    },
    f = "evt.game.ready",
    p = "evt.game.statu.set",
    v = "evt.game.after.show";

  function g (t, n) {
    return t - n
  }

  function m (t, n) {
    return i(t, [n[0] / 2, n[1]])
  }
  var b = function (t, e, s, a) {
    this.vod_chk_finish = a, this.gn = e;
    var _ = [0, 1].map(function (t) {
      return ["gn", e, "0", t].join("_")
    });
    this.obj_textures = {
      stay: [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1].map(function (t) {
        return o(["gn", e, "0", t].join("_"))
      }),
      run: Array.from({
        length: 12
      }).map(function (t, n) {
        return o(["gn", e, "1", n].join("_"))
      })
    }, this.idx = h.ary_gn_name.indexOf(e), this.ani_snail = function (t, n, e) {
      var s, i = [],
        a = [];
      if (Array.isArray(t)) t.map(function (t) {
        i.push(o(t))
      });
      else {
        for (var _ in PIXI.loader.resources[t].textures) i.push(_);
        i = i.sort()
      }
      for (var r = 0; r < i.length; r++) {
        var h = new PIXI.Texture.from(i[r]);
        h.str_name = i[r], a.push(h)
      }
      return s = new PIXI.extras.AnimatedSprite(a), n && n.addChild(s), e && (s.x = e[0], s.y = e[1]),
        s
    }(_, t, m(s, h.ary_gn_wh[this.idx])), this.stay3z = r(this.ani_snail, ["gn", e, "0", "3z"].join("_")),
      this.stay3z.anchor.set(.5, 1), this.stay6z = r(this.ani_snail, ["gn", e, "0", "6z"].join("_")),
      this.stay6z.anchor.set(.5, 1), this.ani_snail.anchor.set(.5, 1);
    var d = function (t) {
      for (var n = 0, e = [], s = [], i = 0; i < t.length; i++) {
        var a = t[i - 1] || t[0],
          o = t[i],
          _ = Math.abs(a[0] - o[0]),
          r = Math.abs(a[1] - o[1]);
        n += Math.sqrt(_ * _ + r * r), e.push(n)
      }
      for (i = 0; i < e.length; i++) s.push(e[i] / n);
      return {
        tol: n,
        accu: e,
        pct: s
      }
    }(h.ary_gn_xy[this.idx]);
    this.pct2xy = (u = d.pct, c = h.ary_gn_xy[this.idx], function (t) {
      if (t > 1) return c[c.length - 1];
      for (var n = u.length; n >= 0; n--) {
        var e = u[n];
        if (t == e) return c[n];
        if (t > e) return i(c[n], i(c[n + 1], c[n], g), function (s, i) {
          return s + i * (t - e) / (u[n + 1] - u[n])
        })
      }
    });
    var u, c;
    this.pct2rot = (l = d.pct, f = h.ary_gn_rot[this.idx], function (t) {
      if (t > 1) return 0;
      for (var n = l.length; n >= 0; n--) {
        var e = l[n];
        if (t == e) return f[n];
        if (t > e) return f[n] + (f[n + 1] - f[n]) * (t - e) / (l[n + 1] - e)
      }
    });
    var l, f;
    this.ani_snail.onFrameChange = function (t) {
      this.stay3z.visible = !1, this.stay6z.visible = !1, this.ani_snail.animationSpeed > .2 || (3 !=
        t && 9 != t || 0 == n(5, 0) && (this[this.ani_name + "3z"].visible = !0), 6 == t && 0 ==
        n(5, 0) && (this[this.ani_name + "6z"].visible = !0))
    }.bind(this), this.ani_snail.play()
  };
  b.prototype = {
    change_ani: function (t, n) {
      n && this.ani_snail.animationSpeed != n && (this.ani_snail.animationSpeed = n), this.ani_name !=
        t && (this.ani_name = t, this.ani_snail.textures = this.obj_textures[t], this.ani_snail.texture =
          this.obj_textures[t][0], this.ani_snail.play(), h.aniSpeed[t] && (this.ani_snail.animationSpeed =
            h.aniSpeed[t]))
    },
    enter_playground: function () {
      var t = h.ary_gn_xy[this.idx][0],
        n = i(t, [-200, 0]);
      this.run(n, t, h.sec.enter, h.aniSpeed.enter)
    },
    exit_playground: function () {
      var t = h.ary_gn_xy[this.idx][h.ary_gn_xy_last_idx],
        n = i(t, [200, 0]);
      return this.run(t, n, h.sec.exit, h.aniSpeed.exit)
    },
    run: function (t, n, e, s, i) {
      t = m(t, h.ary_gn_wh[this.idx]), n = m(n, h.ary_gn_wh[this.idx]);
      return (new TimelineMax).to(this.ani_snail, 0, {
        x: t[0],
        y: t[1]
      }).to(this.ani_snail, e, {
        x: n[0],
        y: n[1],
        ease: Linear.easeNone,
        onStartScope: this,
        onStart: function () {
          this.change_ani("run", s)
        },
        onCompleteScope: this,
        onComplete: function () {
          this.change_ani("stay"), i && i()
        }
      })
    },
    run_by_script: function (t) {
      for (var n = [], e = 0; e < t.length; e += 10) {
        var s = t.slice(e, e + 10);
        n.push({
          pct: s.reduce(function (t, n) {
            return t + n
          }, 0),
          count: s.length
        })
      }
      var i = 0,
        a = new TimelineMax,
        o = new TimelineMax;
      o.to(this.ani_snail, 0, {
        animationSpeed: .3
      }), t.forEach(function (t, e) {
        if (i += t, e % 10 == 0) {
          var s = n[e / 10],
            _ = h.num_gn_xy_tol * s.pct / 100 / (10 * s.count) + h.aniSpeed.run_offset;
          o.to(this.ani_snail, h.sec.run_each * s.count, {
            animationSpeed: _
          })
        }
        var r = m(this.pct2xy(i / 100), h.ary_gn_wh[this.idx]),
          d = this.pct2rot(i / 100);
        a.to(this.ani_snail, h.sec.run_each, {
          x: r[0],
          y: r[1],
          rotation: d
        })
      }, this);
      var _ = m(h.ary_gn_xy[this.idx][3], h.ary_gn_wh[this.idx]);
      return a.to(this.ani_snail, h.sec.end, {
        x: _[0],
        y: _[1],
        rotation: 0,
        onCompleteScope: this,
        onComplete: function () {
          this.change_ani("stay")
        }
      }), a.add(o, 0), a
    }
  };
  var y = function (t, n, e) {
    this.vod_snd_effect_snd_flag = e, this.idx = n, h.ary_gn_wh[n];
    var s = h.ary_flag_xy[n];
    this.sp_rank = r(t, "cd_3", s), this.sp_rank.alpha = 0, this.sp_rank.scale.set(.7), this.sp_rank.anchor
      .set(.5)
  };
  y.prototype = {
    vod_drop: function (t) {
      return (new TimelineMax).to(this.sp_rank, 0, {
        pixi: {
          scaleX: 5,
          scaleY: 5,
          alpha: 0
        }
      }).to(this.sp_rank, .1, {
        onStartScope: this,
        onStart: function () {
          this.sp_rank.texture = o("cd_" + t), this.vod_snd_effect_snd_flag()
        },
        pixi: {
          scaleX: .7,
          scaleY: .7,
          alpha: 1
        }
      })
    },
    vod_reset: function () {
      this.sp_rank.alpha = 0
    }
  };
  var x = function (t, n, e) {
    this.bol_is_mute_bg = !1, this.bol_is_mute_effect = !1, this.obj_snd = {}, this.obj_pass_bg_snd = n,
      this.str_default_bg = e, this.snd_bg = null, this.str_bg = e, this.snd_bg_vol = 1, this.loader = t,
      this.snd_effect_resume_bg_timeout = null
  };
  x.prototype = {
    vod_switch_bg: function (t, n) {
      n && (this.snd_bg_vol = n), t != this.str_bg ? (this.str_bg = t, n && (this.snd_bg_vol = n),
        this.snd_bg && this.snd_bg.stop(), "silent" != t ? (this.vod_get_bg(t, this.snd_bg_vol),
          this.vod_play_bg(!this.bol_is_mute_bg)) : this.snd_bg = null) : this.snd_bg && (
            this.snd_bg.volume = this.snd_bg_vol)
    },
    vod_play_bg: function (t) {
      this.bol_is_mute_bg = !t;
      var n = this.snd_bg || this.vod_get_bg(this.str_bg);
      n && (this.bol_is_mute_bg && n.isPlaying ? n.stop() : this.bol_is_mute_bg || n.isPlaying || n.play())
    },
    vod_get_bg: function (t, n) {
      if ("silent" != t) {
        var e = this.snd_get_by_str(t);
        if (e) return e.loop = !0, e.volume = 1, n && (e.volume = n), this.snd_bg = e, e;
        console.warn("can't find snd resource:", t)
      }
    },
    vod_play_eff: function (t) {
      this.bol_is_mute_effect = !t
    },
    play_snd_eff: function (t, n, e) {
      return this.vod_snd_effect(t, n, e)
    },
    stop_snd_eff: function (t) {
      return this.vod_snd_effect_stop(t)
    },
    vod_snd_effect: function (t, n, e) {
      if (1 != this.bol_is_mute_effect) {
        var s = this.snd_get_by_str(t);
        s.loop = 1 == n, this.obj_pass_bg_snd[t] && (this.snd_bg && (this.snd_bg.volume = 0), n ||
          (this.snd_effect_resume_bg_timeout && clearTimeout(this.snd_effect_resume_bg_timeout),
            this.snd_effect_resume_bg_timeout = setTimeout(function () {
              this.vod_snd_effect_stop(t)
            }.bind(this), 1e3 * (s.duration + .5)))), s.volume = 1, e && (s.volume = e), s.play()
      }
    },
    vod_snd_effect_stop: function (t) {
      this.obj_snd[t] && (this.obj_snd[t].stop(), this.obj_pass_bg_snd[t] && this.snd_bg && (this.snd_bg
        .volume = this.snd_bg_vol), delete this.obj_snd[t])
    },
    snd_get_by_str: function (t) {
      return this.obj_snd[t] = this.loader.resources[t].sound, this.obj_snd[t]
    },
    vod_destroy: function () {
      this.obj_snd = null, this.snd_bg = null, this.snd_effect_resume_bg_timeout && clearTimeout(this
        .snd_effect_resume_bg_timeout)
    }
  };

  function w (t) {
    var n = r(t, "bg_particle");
    n.x = Math.random() * c.w, n.y = Math.random() * c.h;
    var e = n.x + 1e3 * (Math.random() - .5),
      s = n.y + 1e3 * (Math.random() - .5),
      i = Math.random() / 1e3,
      a = .8 * Math.random(),
      o = .15 * Math.random() + .1;
    return n.alpha = a, n.scale.x = n.scale.y = o,
      function () {
        (0 > n.x || n.x > c.w || 0 > n.y || n.y > c.h) && (n.alpha = 0, n.x = Math.random() * c.w, n.y =
          Math.random() * c.h), 1 == Math.ceil(300 * Math.random()) && (e = n.x + 1e3 * (Math.random() -
            .5), s = n.y + 1e3 * (Math.random() - .5), i = Math.random() / 1e3, a = .8 * Math.random(),
            o = .15 * Math.random() + .1), n.x += (e - n.x) * i, n.y += (s - n.y) * i, n.alpha += (a -
              n.alpha) * i, n.scale.x = n.scale.y += (o - n.scale.x) * i
      }
  }

  function I (t, n) {
    t.promise.then(this.vod_ass_rdy.bind(this)), this.do_fit_scr = n, this.app = new PIXI.Application(c.w, c.h),
      this.stage = this.app.stage, this.renderer = this.app.renderer, this.sound = new x(t.loader, {
        snd_win: !0,
        snd_close_bet_1: !0,
        snd_close_bet_2: !0,
        snd_count_1: !0,
        snd_count_0: !0
      }, "snd_bet"), this.el = this.app.view, t.loader.onProgress.add(function (t) {
        this.el.dispatchEvent(new CustomEvent(l.evt_eng_progress, {
          detail: t.progress
        }))
      }.bind(this)), this._events = {}, this.int_statu = 0, this.ary_snail = [], this.ary_flag = [], this.int_snail_end =
      0, this.vod_update = this.vod_update.bind(this), this.app.ticker.add(this.vod_update)
  }
  I.prototype = {
    vod_update: function (t) {
      this.el.dispatchEvent(new CustomEvent(l.evt_upd_bf, {
        detail: t
      }))
    },
    vod_ass_rdy: function () {
      this.vod_ui_game(), this.vod_game_set()
    },
    vod_ui_scr: function (t, n) {
      if (n) {
        var e;
        t(function () {
          var t = this.renderer.width / c.scale / 2,
            n = Math.max.apply(null, this.ary_snail.map(function (t) {
              return t.ani_snail.x
            })),
            s = n - t;
          n - t < 0 ? s = 0 : n + t > c.w && (s = c.w - 2 * t), s = -1 * s * c.scale, e !=
            s && (this.bg.x = s), e = s
        }.bind(this))
      }
    },
    vod_ui_game: function () {
      this.bg = _(this.stage, "bg_snra");
      var t = this.bg;
      this.ary_flag = [];
      var n = function () {
        this.sound.vod_snd_effect("snd_flag")
      }.bind(this);
      this.ary_snail = h.ary_gn_name.map(function (e, s) {
        var i = new b(t, e, [-1, -1]);
        return this.ary_flag.push(new y(t, s, n)), i
      }, this), this._events[l.evt_upd_bf] = [];
      var e = function (t) {
        return this._events[l.evt_upd_bf].push(t), this.el.addEventListener(l.evt_upd_bf, t),
          function () {
            var n = this._events[l.evt_upd_bf].indexOf(t);
            this._events[l.evt_upd_bf].splice(n, 1), this.el.removeEventListener(l.evt_upd_bf,
              t)
          }.bind(this)
      }.bind(this);
      r(t, "bg_t_dark", [210, 0]).blendMode = PIXI.BLEND_MODES.MULTIPLY;
      var s = r(t, "bg_light_1", [120, 0]);
      s.blendMode = PIXI.BLEND_MODES.ADD;
      var i = r(t, "bg_light_2", [0, 0]);
      i.blendMode = PIXI.BLEND_MODES.ADD, this.bg_light_3 = r(t, "bg_light_3", [715, 30]), this.bg_light_3
        .anchor.set(.5), this.bg_light_3.blendMode = PIXI.BLEND_MODES.ADD, this.bg_light_3.alpha =
        0, this.tm2 = new TimelineMax({
          repeat: -1
        }), this.tm2.set(s, {
          alpha: .5
        }, 0).to(s, 5, {
          alpha: .2
        }, 0).to(s, 5, {
          alpha: .5
        }, 5).set(i, {
          alpha: .5
        }, 0).to(i, 5, {
          alpha: .2
        }, 0).to(i, 5, {
          alpha: .5
        }, 5),
        function (t, n) {
          var e = new PIXI.particles.ParticleContainer(600, {
            scale: !0,
            position: !0,
            rotation: !0,
            uvs: !0,
            alpha: !0
          });
          e.blendMode = PIXI.BLEND_MODES.ADD;
          for (var s = [], i = 0; i < 80; i++) s.push(w(e));
          t.addChild(e), n(function (t) {
            var n = t.detail;
            s.forEach(function (t) {
              t(n)
            })
          })
        }(t, e), this.sp_countdown = r(t, "cd_3", [h.int_countdown_x, 212], PIXI.loader), this.sp_countdown
          .anchor.set(.5), this.vod_ui_scr(e, this.do_fit_scr)
    },
    vod_statu_set: function (t) {
      this.int_statu = t, this.el.dispatchEvent(new CustomEvent(p, {
        detail: {
          int_statu: t
        }
      }))
    },
    vod_game_set: function () {
      this.sound.vod_play_bg(!1), this.vod_game_reset(!0), this.el.dispatchEvent(new CustomEvent(f))
    },
    vod_game_reset: function (n, e) {
      var s = !1;
      return (this.int_statu != d || n || e) && (s = !0), s && (t(this), this.int_snail_end = 0, this
        .sp_countdown.visible = !1, this.sound.vod_switch_bg("snd_bet"), this.ary_flag.forEach(
          function (t) {
            t.vod_reset()
          }), this.vod_statu_set(d), e ? t(this, "tm2") : this.ary_snail.forEach(function (t) {
            t.enter_playground()
          })), s
    },
    push_run_script: function (n, e) {
      var i = !1;
      if (this.int_statu != d && (i = !0), i && this.vod_game_reset(!0), n) {
        var a = e.split(",").map(function (t) {
          return t - 1
        });
        return this.vod_statu_set(u), this.ary_snail.forEach(function (t) {
          t.change_ani("run", h.aniSpeed.prepare)
        }), this.int_snail_end = 0, t(this), this.tm = new TimelineMax, this.sound.vod_switch_bg(
          "silent"), this.tm.set(this.sp_countdown, {
            pixi: {
              scaleX: 1,
              scaleY: 1,
              alpha: 1
            }
          }).to(this.sp_countdown, .9, {
            pixi: {
              scaleX: 1.5,
              scaleY: 1.5
            },
            onStart: _,
            onStartParams: [3],
            onStartScope: this
          }).to(this.sp_countdown, .1, {
            alpha: 0
          }).set(this.sp_countdown, {
            pixi: {
              scaleX: 1,
              scaleY: 1,
              alpha: 1
            }
          }).to(this.sp_countdown, .9, {
            pixi: {
              scaleX: 1.5,
              scaleY: 1.5
            },
            onStart: _,
            onStartParams: [2],
            onStartScope: this
          }).to(this.sp_countdown, .1, {
            alpha: 0
          }).set(this.sp_countdown, {
            pixi: {
              scaleX: 1,
              scaleY: 1,
              alpha: 1
            }
          }).to(this.sp_countdown, .9, {
            pixi: {
              scaleX: 1.5,
              scaleY: 1.5
            },
            onStart: _,
            onStartParams: [1],
            onStartScope: this,
            onCompleteScope: this,
            onComplete: function () {
              this.sp_countdown.visible = !1, this.sound.vod_snd_effect("snd_count_0"),
                this.sound.vod_switch_bg("snd_race")
            }
          }).add("count_0").to(this.sp_countdown, .1, {
            alpha: 0
          }).add((new TimelineMax).set(this.bg_light_3, {
            pixi: {
              scaleX: 2,
              scaleY: 2,
              alpha: 0
            },
            rotation: s(-85)
          }).to(this.bg_light_3, .2, {
            alpha: 1
          }).to(this.bg_light_3, .9, {
            pixi: {
              scaleX: 6,
              scaleY: 6
            },
            rotation: s(66)
          }).to(this.bg_light_3, .5, {
            alpha: 0,
            rotation: s(74)
          }), "count_0-=1"), this.ary_snail.forEach(function (t, e) {
            this.tm.add(t.run_by_script(n[e + 1]).add(this.ary_flag[e].vod_drop(a.indexOf(e) +
              1)), "count_0")
          }, this), this.tm.to({}, 4, {
            onStartScope: this,
            onStart: function () {
              this.sound.vod_switch_bg("silent"), this.el.dispatchEvent(new CustomEvent(
                v))
            }
          }), this.tm.add(function () {
            this.ary_flag.forEach(function (t) {
              t.vod_reset()
            }), this.ary_snail.forEach(function (t) {
              this.tm.add(t.exit_playground(), "left")
            }, this), this.tm.add(this.vod_game_reset.bind(this, !0))
          }.bind(this)), i
      }

      function _ (t) {
        this.sp_countdown.visible = !0, this.sp_countdown.texture = o("cd_" + t), this.sp_countdown
          .x = this.renderer.width / 2, this.sound.vod_snd_effect("snd_count_1")
      }
    },
    vod_destroy: function () {
      this.vod_game_reset(!0, !0);
      for (var t in this._events) this._events[t].forEach(function (n) {
        this.el.removeEventListener(t, n)
      }, this);
      this.sound.vod_play_bg(!1), this.sound.vod_play_eff(!1), this.stage.destroy({
        children: !0
      }), this.app.destroy()
    }
  };
  var S = function (t) {
    this.loader = t, this.str_ass_pfix = "", this.obj_ass_list = {}, this.obj_ass_view_type_list = {}, this
      .promise = null
  };
  S.prototype = {
    vod_merge_ast: function (t, n) {
      if (n) {
        var e;
        (e = this.obj_ass_view_type_list[n]) || (e = this.obj_ass_view_type_list[n] = {})
      } else e = this.obj_ass_list;
      for (var s in t) e[s] = t[s]
    },
    vod_init: function (t, n) {
      this.loader = this.loader || new PIXI.loaders.Loader, this.str_ass_pfix = t, n && this.vod_merge_ast(
        this.obj_ass_view_type_list[n]);
      for (var e in this.obj_ass_list) this.loader.add(e, this.str_ass_pfix + this.obj_ass_list[e]);
      this.promise = new Promise(function (t, n) {
        this.loader.once("complete", t)
      }.bind(this)), this.loader.load()
    },
    vod_destroy: function () {
      this.promise = null, this.loader.reset(), PIXI.sound.removeAll();
      for (var t in PIXI.BaseTextureCache) delete PIXI.BaseTextureCache[t];
      for (var t in PIXI.TextureCache) delete PIXI.TextureCache[t]
    }
  };
  var M = new S(PIXI.loader);
  M.vod_merge_ast({
    sht_snra: "json/snra.json",
    bg_snra: "images/bg.jpg"
  }), M.vod_merge_ast({
    snd_race: "sound/m_race.mp3",
    snd_bet: "sound/m_bet.mp3",
    snd_flag: "sound/s_flag.mp3",
    snd_close_bet_1: "sound/s_close_bet_1.mp3",
    snd_close_bet_2: "sound/s_close_bet_2.mp3",
    snd_count_1: "sound/s_count_1.mp3",
    snd_count_0: "sound/s_count_0.mp3",
    snd_win: "sound/s_win.mp3",
    snd_change: "sound/s_change.mp3",
    snd_btn: "sound/s_btn.mp3"
  });
  M.vod_merge_ast.bind(M);
  var E = function (t, n) {
    if (E.config.assets_path) {
      M.promise || M.vod_init(E.config.assets_path);
      var s = new I(M, n);
      return t.appendChild(s.el), e("register_", [{
        evtName: "progress",
        bindName: l.evt_eng_progress
      }, {
        prefix: "",
        evtName: "ready",
        once: !0,
        cache: !0,
        bindName: f
      }, {
        evtName: "after_show_once",
        once: !0,
        bindName: v
      }], s.el, {
        game: s,
        el: s.el,
        vod_resize_canvas: function (t, n) {
          var e = c.h,
            i = c.w,
            a = 1;
          return n != e && (a = n / e), (t /= a) > i && (t = i), s.renderer.resize(t, e), {
            scale_h: a
          }
        },
        push_run_script: function () {
          var t = [].slice.call(arguments);
          return s.push_run_script.apply(s, t)
        },
        play_snd_effect: function (t) {
          switch (t) {
            case "CloseBet_1":
              s.sound.vod_snd_effect("snd_close_bet_1");
              break;
            case "CloseBet_2":
              s.sound.vod_snd_effect("snd_close_bet_2");
              break;
            case "Win":
              s.sound.vod_snd_effect("snd_win");
              break;
            case "Change":
              s.sound.vod_snd_effect("snd_change");
              break;
            case "Button":
              s.sound.vod_snd_effect("snd_btn")
          }
        },
        vod_play_bg: function (t) {
          s.sound.vod_play_bg(t)
        },
        vod_play_eff: function (t) {
          s.sound.vod_play_eff(t)
        },
        vod_destroy: function () {
          t.removeChild(s.el), s.vod_destroy()
        }
      }, "vod_destroy")
    }
    console.warn("SnailRace.config.assets_path not set")
  };
  return E.config = {}, E.ver = "201709151400", E
});