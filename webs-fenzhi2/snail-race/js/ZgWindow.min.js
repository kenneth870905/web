var ZgWindow = function (m) {
  var g = this;
  var j;
  var e;
  var k = 0;
  var i = $.extend({
    smallPosition: "right",
    SetWinsize: true,
    CanSetsize: true,
    CanSetMax: true,
    CanSetMove: true
  }, m);
  var r = function () {
    var s = $.extend({
      id: false,
      type: "html",
      title: "new_windows",
      html: false,
      url: false,
      lock: false,
      width: 600,
      height: 500,
      SetCoordinate: false,
      top: 32,
      left: 0,
      minTop: 0,
      repeat_iframe: false,
      Classify: "_New",
      firstShow: true,
      UseMask: false,
      OpenMax: false,
      SetWinsize: true,
      CanSetsize: true,
      CanSetMax: true,
      CanSetMove: true,
      TiedObj: false,
      TiedPosition: "top",
      ScalingSpeed: 300,
      containment: $(window),
      containment_top: 0,
      post_data: {},
      CloseEvent: function () { },
      OpenEvent: function () { }
    }, i);
    return s
  };
  var n = function () {
    var s = 0;
    j.find(".Windows").each(function () {
      if ($(this).css("z-index") != "auto") {
        if ($(this).css("z-index") > s * 1) {
          s = $(this).css("z-index")
        }
      }
    });
    return s
  };
  var c = function (t) {
    var s = false;
    j.find(".Windows").each(function () {
      if ($(this).find("iframe[src='" + t + "']").length > 0) {
        s = $(this)
      }
    });
    return s
  };
  var o = function (t) {
    var s = false;
    if (j.find(".Windows#" + t).length > 0) {
      s = j.find(".Windows#" + t)
    }
    return s
  };
  this.OpenWin = function (v) {
    var w = r();
    $.extend(w, v);
    if (w.id) {
      var y = w.id
    } else {
      var y = "ZgWin_" + k
    }
    var z = o(w.id);
    if (z) {
      var u = z
    } else {
      var u = b(y, w)
    }
    switch (w.type) {
      case "iframe":
        if (!w.repeat_iframe) {
          var A = c(w.url);
          if (A) {
            if (A.hasClass("small")) {
              l(A, w)
            }
            A.trigger("click");
            if (!z) {
              u.remove()
            }
            return
          }
        }
        u.find(".WinContent").css("overflow", "hidden");
        if (!w.url) {
          return
        }
        var B = $("<iframe/>").attr({
          id: y + "_iframe",
          name: y + "_iframe",
          frameborder: 0,
          vspace: 0,
          hspace: 0,
          vspace: 0,
          width: "100%",
          height: "99%"
        }).addClass("ZgIframe");
        B.on("load", function () {
          B.contents().click(function (C) {
            B.trigger("click")
          })
        });
        var s = $("<form>").attr({
          id: y + "_form",
          action: w.url,
          target: y + "_iframe",
          method: "POST"
        });
        if (w.post_data) {
          for (var t in w.post_data) {
            s.append($("<input/>").attr({
              type: "hidden",
              name: t
            }).val(w.post_data[t]))
          }
        }
        var x = $("<div/>").css({
          height: "100%",
          "padding-bottom": "10px"
        }).html(s).append(B);
        u.find(".WinContent").html(x);
        if (w.firstShow) {
          g.ShowWin(u, w);
          s.submit()
        } else {
          loading(true);
          B.load(function () {
            loading(false);
            g.ShowWin(u, w)
          });
          s.submit()
        }
        break;
      case "html":
        if (!w.html) {
          u.remove();
          return
        }
        u.find(".WinContent").html(w.html);
        g.ShowWin(u, w);
        break
    }
    k++;
    return u
  };
  this.ShowWin = function (v, y) {
    if (v.hasClass("big")) {
      v.trigger("ToTop")
    } else {
      if (v.hasClass("small")) {
        v.trigger("ToEnlarge")
      } else {
        if (y.TiedObj) {
          v.trigger("ToEnlarge");
          if (y.SetCoordinate) {
            if (y.top < y.minTop) {
              y.top = y.minTop
            }
            var z = y.top;
            var u = y.left;
            if (z < 0) {
              z = 0
            }
            if (u < 0) {
              u = 0
            }
            v.css({
              top: z,
              left: u
            }).attr({
              data_top: z,
              data_left: u
            })
          }
        } else {
          v.removeClass("small").addClass("big");
          v.css("margin-top", y.containment_top);
          v.width(y.width);
          v.height(y.height);
          var B = v.width();
          var x = v.height();
          if (y.SetCoordinate) {
            if (y.top < y.minTop) {
              y.top = y.minTop
            }
            v.css({
              top: y.top,
              left: y.left
            }).attr({
              data_top: y.top,
              data_left: y.left
            })
          } else {
            var A = $(window).width();
            var t = $(window).height();
            var C = ((t - x) / 2) - 32 - y.containment_top;
            var s = ((A - B) / 2);
            v.css({
              top: C,
              left: s
            }).attr({
              data_top: C + y.containment_top,
              data_left: s
            })
          }
          if (y.CanSetMove) {
            v.draggable("enable")
          }
          if (y.SetWinsize) {
            v.resizable("enable")
          }
          v.trigger("ToTop");
          v.show();
          var z = v.position().top;
          var u = v.position().left;
          if (z < 0) {
            z = 0
          }
          if (u < 0) {
            u = 0
          }
          v.css({
            opacity: 0,
            top: z + 50,
            left: u + 50,
            width: v.width() - 100,
            height: v.height() - 100,
          });
          v.find(".WinContent").hide();
          v.stop().animate({
            opacity: 1,
            top: "-=50px",
            left: "-=50px",
            width: "+=100px",
            height: "+=100px"
          }, y.ScalingSpeed, function () {
            if (y.OpenMax) {
              v.trigger("ToMaxEnlarge")
            } else {
              v.find(".WinContent").show()
            }
            v.trigger("ToTop")
          })
        }
        v.trigger("OpenEvent")
      }
    }
    if (y.UseMask) {
      v.find(".bg").stop(true, true).fadeIn(y.ScalingSpeed)
    }
  };
  this.CloseWin = function (s) {
    j.find("#" + s).trigger("Close")
  };
  this.CloseWin_Classify = function (s) {
    j.find(".Windows").each(function () {
      if ($(this).hasClass(s)) {
        $(this).trigger("Close")
      }
    })
  };
  this.ReStatus_Classify = function (t) {
    var s = false;
    j.find(".Windows").each(function () {
      if ($(this).hasClass(t)) {
        if ($(this).hasClass("small")) {
          s = "small"
        } else {
          s = "big"
        }
      }
    });
    return s
  };
  this.Open_Classify = function (s) {
    j.find(".Windows").each(function () {
      if ($(this).hasClass(s)) {
        if ($(this).hasClass("small")) {
          $(this).trigger("ToEnlarge")
        }
      }
    })
  };
  this.Narrow_Classify = function (s) {
    j.find(".Windows").each(function () {
      if ($(this).hasClass(s)) {
        if ($(this).hasClass("big")) {
          $(this).trigger("ToNarrow")
        }
      }
    })
  };
  this.Top_Classify = function (t) {
    var s = true;
    j.find(".Windows").each(function () {
      if ($(this).hasClass(t)) {
        var u = n();
        if ($(this).css("z-index") < u) {
          u++;
          $(this).css("z-index", u);
          s = false
        }
      }
    });
    return s
  };
  var b = function (v, x) {
    var w = $("<div/>").attr({
      id: v,
      data_tied: x.TiedObj ? true : false,
    }).addClass("Windows " + x.Classify).css({
      opacity: 1
    });
    w.append($("<div/>").attr("id", "ZgWindow_bg").addClass("bg"));
    var s = $("<div/>").addClass("Cn");
    var u = $("<div/>").addClass("Cnn");
    var t = $("<div/>").addClass("WinTitle");
    t.append($("<div/>").addClass("tool").append(function () {
      if (x.CanSetsize) {
        return $("<div/>").addClass("glyphicon glyphicon-minus ToSmall")
      } else {
        return false
      }
    }).append(function () {
      if (x.CanSetMax) {
        return $("<div/>").addClass("glyphicon glyphicon-unchecked ToMaxEnlarge")
      } else {
        return false
      }
    }).append($("<div/>").addClass("glyphicon glyphicon-remove ZwClose")));
    t.append($("<div/>").addClass("title_string").append(x.title));
    t.append($("<div/>").addClass("clearfix"));
    u.append($('<div class="WinContent"></div>'));
    s.append(u);
    w.append(t);
    w.append(s);
    w.append($('<div class="Mask"></div>'));
    w.hide();
    j.append(w);
    w = d(w, x);
    return w
  };
  var d = function (s, t) {
    if (t.CanSetMove) {
      s.draggable({
        handle: ".WinTitle",
        containment: "window",
        cursor: "crosshair",
        scroll: false,
        start: function (u, v) {
          s.find(".Mask").show();
          s.trigger("ToTop")
        },
        stop: function (u, v) {
          s.find(".Mask").hide();
          s.attr({
            data_top: v.position.top,
            data_left: v.position.left
          })
        }
      });
      s.draggable("disable")
    }
    if (t.SetWinsize) {
      s.resizable({
        host: true,
        start: function (u, v) {
          s.find(".Mask").show();
          s.trigger("ToTop");
          s.find(".WinContent").css("overflow", "hidden")
        },
        stop: function (u, v) {
          s.find(".Mask").hide();
          s.attr({
            data_width: v.size.width,
            data_height: v.size.height
          });
          if (t.type != "iframe") {
            s.find(".WinContent").css("overflow", "auto")
          }
        }
      });
      s.resizable("disable")
    }
    s.bind("ToNarrow", t, function (u) {
      h($(this), u.data)
    });
    s.bind("ToEnlarge", t, function (u) {
      l($(this), u.data)
    });
    s.bind("ToMaxEnlarge", t, function (u) {
      a($(this), u.data)
    });
    s.bind("Close", t, function (u) {
      $(this).trigger("CloseEvent");
      $(this).find(".WinContent").hide();
      $(this).stop().animate({
        opacity: 0,
        top: "+=50px",
        left: "+=50px",
        width: "-=100px",
        height: "-=100px"
      }, t.ScalingSpeed, function () {
        $(this).remove()
      });
      $(this).find(".bg").stop(true, true).fadeOut(t.ScalingSpeed)
    });
    s.bind("CloseEvent", t.CloseEvent);
    s.bind("OpenEvent", t.OpenEvent);
    s.bind("ToTop", t, function (v) {
      var u = n();
      if ($(this).css("z-index") < u || $(this).css("z-index") == "auto") {
        u++;
        $(this).css("z-index", u);
        ck = false
      } else {
        u++;
        $(this).css("z-index", u)
      }
    });
    s.bind("ToTopNarrow", t, function (v) {
      var u = n();
      if ($(this).css("z-index") < u || $(this).css("z-index") == "auto") {
        u++;
        $(this).css("z-index", u)
      } else {
        h($(this), v.data)
      }
    });
    s.click(s, function (u) {
      u.data.trigger("ToTop")
    });
    s.find(".ZwClose").click(s, function (u) {
      u.data.trigger("Close")
    });
    s.find(".ToMaxEnlarge").click(s, function (u) {
      u.data.trigger("ToMaxEnlarge")
    });
    s.find(".ToSmall").click(s, function (u) {
      if (u.data.hasClass("small")) {
        u.data.trigger("ToEnlarge");
        return
      }
      if (u.data.hasClass("big")) {
        u.data.trigger("ToNarrow");
        return
      }
    });
    s.on("dblclick", ".WinTitle", {
      obj: s,
      op: t
    }, function (v) {
      var u = v.data.obj;
      var w = v.data.op;
      if (u.hasClass("small")) {
        u.trigger("ToEnlarge")
      } else {
        if (u.hasClass("big") && w.CanSetMax) {
          u.trigger("ToMaxEnlarge")
        }
      }
    });
    $(window).resize(function () {
      if (s.hasClass("small")) {
        return
      }
      var v = $(window).width();
      var x = $(window).height();
      if (s.hasClass("Max_big")) {
        s.width(v);
        s.height(x)
      } else {
        if (s.hasClass("big")) {
          var u = s.outerWidth();
          var w = s.outerHeight();
          if (u > v) {
            u = v
          }
          if (w > x) {
            w = x - t.containment_top
          }
          s.css({
            width: u,
            height: w
          }).attr({
            data_width: u,
            data_height: w
          })
        }
      }
      s.find(".WinContent").css("overflow", "hidden");
      s.find(".WinContent").css("overflow", "auto")
    });
    return s
  };
  var p = function (w) {
    if (w.TiedObj) {
      var s = w.TiedObj;
      switch (w.TiedPosition) {
        case "top":
          var v = s.offset().top;
          var u = s.offset().left + (w.TiedObj.width() / 2);
          break;
        case "bottom":
          var v = s.offset().top + w.TiedObj.height();
          var u = s.offset().left + (w.TiedObj.width() / 2);
          break;
        case "right":
          var v = s.offset().top + (w.TiedObj.height() / 2);
          var u = s.offset().left + w.TiedObj.width();
          break;
        case "left":
          var v = s.offset().top + (w.TiedObj.height() / 2);
          var u = s.offset().left;
          break;
        case "center":
          var v = s.offset().top + (w.TiedObj.height() / 2);
          var u = s.offset().left + (w.TiedObj.width() / 2);
          break
      }
    } else {
      var t = 5;
      j.find(".Windows.small[data_tied='false']").each(function () {
        t += $(this).width() + 5
      });
      var v = $(window).height();
      var u = t;
      switch (i.smallPosition) {
        case "left":
          u = u;
          break;
        case "right":
          u = $(window).width() - u - 305;
          break
      }
    }
    return {
      top: v,
      left: u
    }
  };
  var h = function (v, w, s) {
    if (v.hasClass("small")) {
      return
    }
    if (s) {
      var u = n();
      if (v.css("z-index") * 1 < u || $(this).css("z-index") == "auto") {
        u++;
        v.css("z-index", u);
        return
      }
    }
    var t = p(w);
    v.css({
      opacity: 0.5
    });
    v.find(".WinContent").hide();
    v.stop().animate({
      opacity: 0,
      top: t.top,
      left: t.left,
      width: 0,
      height: 0
    }, w.ScalingSpeed, function () {
      $(this).removeClass("big").addClass("small").find(".WinContent").hide();
      $(this).removeAttr("style");
      $(this).css({
        bottom: 0,
        left: t.left
      });
      if (w.CanSetMove) {
        $(this).draggable("disable")
      }
      if (w.SetWinsize) {
        $(this).resizable("disable")
      }
      if (w.TiedObj) {
        $(this).hide()
      } else {
        $(this).css({
          opacity: 1
        })
      }
      $(this).find(".bg").stop(true, true).delay(200).fadeOut(w.ScalingSpeed);
      f()
    })
  };
  var l = function (v, y) {
    v.show();
    if (y.TiedObj) {
      var u = p(y)
    } else {
      var u = {};
      u.top = $(window).height();
      u.left = v.offset().left
    }
    v.removeClass("small").addClass("big").find(".WinContent").show();
    v.css("margin-top", y.containment_top);
    if (v.hasClass("Max_big")) {
      var B = y.containment.width();
      var x = y.containment.height() - y.containment_top;
      v.width(B);
      v.height(x);
      try {
        var C = y.containment.offset().top;
        var s = y.containment.offset().left
      } catch (z) {
        var C = 0;
        var s = 0
      }
    } else {
      v.width(v.attr("data_width") ? v.attr("data_width") : y.width);
      v.height(v.attr("data_height") ? v.attr("data_height") : y.height);
      var B = v.width();
      var x = v.height();
      if (v.attr("data_top") && v.attr("data_left")) {
        var C = v.attr("data_top");
        var s = v.attr("data_left")
      } else {
        var A = $(window).width();
        var t = $(window).height();
        var C = ((t - x) / 2) - 32;
        var s = ((A - B) / 2)
      }
    }
    if (C < 0) {
      C = 0
    }
    if (s < 0) {
      s = 0
    }
    v.trigger("ToTop");
    v.css({
      opacity: 0,
      width: 0,
      height: 0,
      top: u.top,
      left: u.left
    });
    v.find(".WinContent").hide();
    v.stop().animate({
      opacity: 1,
      top: C,
      left: s,
      width: B,
      height: x
    }, y.ScalingSpeed, function () {
      $(this).find(".WinContent").show();
      if (v.hasClass("Max_big")) {
        if (y.CanSetMove) {
          v.draggable("disable")
        }
        if (y.SetWinsize) {
          v.resizable("disable")
        }
      } else {
        if (y.CanSetMove) {
          $(this).draggable("enable")
        }
        if (y.SetWinsize) {
          $(this).resizable("enable")
        }
      }
      f();
      $(this).trigger("resize");
      if (y.type != "iframe") {
        $(this).find(".WinContent").css("overflow", "auto")
      }
      if (y.UseMask) {
        $(this).find(".bg").stop(true, true).fadeIn(y.ScalingSpeed)
      }
    });
    v.find(".WinContent").css("overflow", "hidden")
  };
  var a = function (v, y) {
    if (!v.hasClass("big")) {
      return
    }
    v.find(".WinContent").hide();
    if (v.hasClass("Max_big")) {
      v.find(".ToMaxEnlarge").removeClass("fa fa-clone").addClass("glyphicon glyphicon-unchecked");
      v.removeClass("Max_big").trigger("ToTop");
      var A = v.attr("data_width") ? v.attr("data_width") : y.width;
      var x = v.attr("data_height") ? v.attr("data_height") : y.height;
      if (v.attr("data_top") && v.attr("data_left")) {
        var C = v.attr("data_top");
        var s = v.attr("data_left")
      } else {
        var z = $(window).width();
        var t = $(window).height();
        var C = ((t - x) / 2) - 32;
        var s = ((z - A) / 2)
      }
      v.stop().animate({
        top: C,
        left: s,
        width: A,
        height: x
      }, y.ScalingSpeed, function () {
        v.find(".WinContent").show();
        if (y.CanSetMove) {
          v.draggable("enable")
        }
        if (y.SetWinsize) {
          v.resizable("enable")
        }
        v.trigger("resize");
        if (y.type != "iframe") {
          v.find(".WinContent").css("overflow", "auto")
        }
      })
    } else {
      v.find(".ToMaxEnlarge").removeClass("glyphicon glyphicon-unchecked").addClass("fa fa-clone");
      v.addClass("Max_big").trigger("ToTop");
      var u = y.containment.width();
      var B = y.containment.height() - y.containment_top;
      v.stop().animate({
        top: 0,
        left: 0,
        width: u,
        height: B
      }, y.ScalingSpeed, function () {
        v.find(".WinContent").show();
        if (y.CanSetMove) {
          v.draggable("disable")
        }
        if (y.SetWinsize) {
          v.resizable("disable")
        }
        v.trigger("resize");
        if (y.type != "iframe") {
          v.find(".WinContent").css("overflow", "auto")
        }
      })
    }
    v.find(".WinContent").css("overflow", "hidden")
  };
  var f = function () {
    var u = 5;
    var t = [];
    var v = {};
    j.find(".Windows.small[data_tied='false']").each(function (y) {
      t.push($(this).offset().left);
      v[$(this).offset().left] = $(this)
    });
    switch (i.smallPosition) {
      case "left":
        t.sort();
        break;
      case "right":
        t.sort(function (z, y) {
          return y - z
        });
        break
    }
    for (var s in t) {
      obj = v[t[s]];
      var x = 0;
      switch (i.smallPosition) {
        case "left":
          x = u;
          break;
        case "right":
          x = $(window).width() - u - 305;
          break
      }
      try {
        obj.stop().animate({
          left: x
        }, 300);
        u += obj.width() + 5
      } catch (w) {
        console.log(w)
      }
    }
  };
  this.ReSize = function () {
    f()
  };
  var q = function () {
    if ($("body").children("#ZgWindow").length <= 0) {
      $("body").append($("<div/>").attr("id", "ZgWindow"))
    }
    j = $("body").children("#ZgWindow");
    $(window).resize(function () {
      g.ReSize()
    })
  };
  this.init = function () {
    q()
  };
  this.init()
};